# 列表推导式：用一种简洁的语法来创建新列表，可以嵌套使用条件语句和循环语句
a = [i for i in range(10)]  # 创建一个包含0到9的列表

# lambda表达式：创建一个小函数，可以快速定义一个简单的函数，常用于排序、过滤等操作
a = [(1, 2), (4, 1), (9, 10), (13, -3)]
a.sort(key=lambda x: x[1])  # 按元组的第二个元素排序

# map函数：对一个序列的每个元素都执行一个函数，返回执行结果的新序列
a = [1, 2, 3, 4, 5]
b = list(map(lambda x: x ** 2, a))  # 对a中每个元素求平方，返回新的列表

# filter函数：对一个序列的每个元素都执行一个判断函数，返回符合条件的新序列
a = [1, 2, 3, 4, 5]
b = list(filter(lambda x: x % 2 == 0, a))  # 过滤出a中的偶数，返回新的列表

# zip函数：将多个序列的对应元素打包成一个元组，返回新的元组序列
a = [1, 2, 3]
b = [4, 5, 6]
c = list(zip(a, b))  # 返回[(1, 4), (2, 5), (3, 6)]

# reversed函数：将一个序列翻转，返回翻转后的新序列
a = [1, 2, 3]
b = list(reversed(a))  # 返回[3, 2, 1]

# any函数和all函数：用于判断一个序列中是否有任何元素为True或所有元素都为True
a = [True, False, True]
b = any(a)  # 返回True
c = all(a)  # 返回False

# 拆分长列表为多个短列表
a = [1, 2, 3, 4, 5, 6, 7, 8]
b = [a[i:i+3] for i in range(0, len(a), 3)]  # 将a按长度为3的间隔拆分为多个列表，返回[[1, 2, 3], [4, 5, 6], [7, 8]]

# 使用enumerate函数遍历列表同时获取元素的下标
a = ['a', 'b', 'c']
for i, v in enumerate(a):
    print(i, v)  # 输出0 a、1 b、2 c

# 使用zip函数同时遍历多个序列
a = [1, 2, 3]
b = ['a', 'b', 'c']
for i, j in zip(a, b):
    print(i, j)  # 输出1 a、2 b、3 c
