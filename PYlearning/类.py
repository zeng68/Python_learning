""" ************************************   一   *******************************************************"""


class Animall:

    def __init__(self):
        voice = "嘤嘤嘤"

    def fun(self):
        print("Animal")


class Dog(Animall):
    def __init__(self):
        voice = "汪汪汪"

    def fun(self):
        super().fun()


dog = Dog()
dog.fun()

""" ***********************************************            二          **********************************************
在上述示例中，子类ChildClass重写了父类ParentClass的a()方法。然后，子类的实例对象child_obj调用了父类中没有被重写的b()方法，
这个方法又在内部调用了父类中的a()方法。最终，输出结果显示调用的是子类中重写的a()方法。因此，通过调用没有被重写的方法b()，子类的实例对
象可以间接调用被重写的a()方法。请注意，这种行为的前提是父类中的b()方法没有被子类重写，而子类中的a()方法被重写了。如果子类也重写了b()方法，
那么调用子类的b()方法将执行子类中的实现，而不会间接调用被重写的a()方法。
    这样用法的好处：
在子类中通过调用父类的方法来间接调用被重写的方法，有几个潜在的好处：
1. **代码复用性**：通过使用父类的方法作为中间层，可以避免在子类中重复编写相同的逻辑。这样可以减少代码的冗余，提高代码的复用性。
2. **扩展性**：通过子类重写父类的方法，可以在子类中实现新的功能或修改父类方法的行为。同时，通过调用父类的其他方法，可以保留或扩展父类方法的功能，从而实现更灵活的扩展。
3. **维护性**：通过使用父类方法作为接口，可以将代码的变更局限在子类中，而不影响父类及其他使用父类的代码。这样可以提高代码的维护性，减少对整体代码的影响。
4. **代码结构清晰**：通过使用父类的方法作为中间层，可以将代码按照逻辑关系进行分层和组织，使代码结构更加清晰和易于理解。
综上所述，通过调用父类的方法来间接调用被重写的方法，可以提高代码的复用性、扩展性和维护性，同时使代码结构更清晰。这种方式符合面向对象编程的原则，提供了一种灵活和可扩展的代码设计方式。

"""


class ParentClass:
    def a(self):
        print("ParentClass - a()")

    def b(self):
        print("ParentClass - b()")
        self.a()


class ChildClass(ParentClass):
    def a(self):
        print("ChildClass - a()")


# 创建子类的实例对象
child_obj = ChildClass()

# 调用子类的b()方法，间接调用被重写的a()方法
child_obj.b()
